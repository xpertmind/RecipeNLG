CREATE GRAPH RecipeNLG()

CREATE SCHEMA_CHANGE JOB create_ddl_recipe FOR GRAPH RecipeNLG {
    ADD VERTEX recipes(PRIMARY_ID id INT, title STRING, link STRING, source STRING, louvain_comm INT, wgt_pagerank FLOAT, kcore INT) WITH primary_id_as_attribute="true";
    ADD VERTEX directions(PRIMARY_ID instruction STRING) WITH primary_id_as_attribute="true";
    ADD VERTEX ingredients(PRIMARY_ID ingredient STRING ) WITH primary_id_as_attribute="true";
    ADD VERTEX keywords(PRIMARY_ID keyword STRING) WITH primary_id_as_attribute="true";

    ADD UNDIRECTED EDGE recipe_keyword(FROM recipes, TO keywords);
    ADD DIRECTED EDGE recipe_ingredient(FROM recipes, TO ingredients) with REVERSE_EDGE="ingredient_recipe";
    ADD DIRECTED EDGE howto_cook(FROM recipes, TO directions, step UINT) with REVERSE_EDGE="rev_howto_cook";
}
RUN SCHEMA_CHANGE JOB create_ddl_recipe
DROP JOB create_ddl_recipe

USE GRAPH RecipeNLG

CREATE QUERY a_simple_select(vertex<recipes> recipe) FOR GRAPH RecipeNLG {
/* This query is just a simple select to return a recipe with directions how to cook and with ingredients */
  SetAccum <INT> @step;
  SetAccum <EDGE> @@all_edges;

  start = {recipe};

  rec = SELECT s from start:s;
  res = SELECT p
            FROM rec:s -((howto_cook):e)- :p
            ACCUM p.@step = e.step, @@all_edges += e;

  PRINT  rec, res, @@all_edges;
}

CREATE QUERY b_all_recipes_for_a_keyword(vertex<keywords> keyword) FOR GRAPH RecipeNLG {
/* This query returns all recipes for a specific keyword
ie: onion, parmesan, ground beef
*/
  SetAccum <EDGE> @@all_edges;

  start = {keyword};

  rec = SELECT s from start:s;
  res = SELECT p
            FROM rec:s -((recipe_keyword):e)- :p
            LIMIT 10;

  PRINT  rec, res;
}

CREATE QUERY c_multi_hops(vertex<recipes> recipe) FOR GRAPH RecipeNLG {
/* This query returns a multi hop pattern for a specific recipe */
  SetAccum <EDGE> @@all_edges;

  start = {recipe};

  rec = SELECT s from start:s;

  res1 = SELECT p
            FROM rec:s -((howto_cook):e)- :p
            ACCUM @@all_edges += e;
  res2 = SELECT p
            FROM res1:s -((rev_howto_cook):e)- :p
            ACCUM @@all_edges += e;
  res3 = SELECT p
            FROM res2:s -((howto_cook):e)- :p
            ACCUM @@all_edges += e;

  PRINT  rec, res1, res2, res3, @@all_edges;
}

CREATE QUERY d_recipe_counter() FOR GRAPH RecipeNLG {
/* This query returns the number of directions (howto_cook edge) for all recipes*/
  MapAccum<STRING, INT> @@steps;

  start = {recipes.*};

  rec = SELECT p
            FROM start:s -(howto_cook:e)- :p
            ACCUM @@steps += (s.title -> 1);

  print @@steps;
}

CREATE QUERY e_recipe_counter_2() FOR GRAPH RecipeNLG {
/* This query aggregates the number of edges for all recipes by edge type */
  MapAccum<INT, MapAccum<STRING, INT>> @@details;

  start = {recipes.*};

  rec = SELECT p
            FROM start:s -(:e)- :p
            ACCUM @@details += ( s.id ->(e.type -> 1) );

  print @@details as myList;
}

CREATE QUERY f_recipe_complexity(INT k=10) FOR GRAPH RecipeNLG {
/* This query finds the recipe with the most cooking directions */
SumAccum<INT> @steps;
Start={recipes.*};
rec = SELECT s
             FROM Start:s-(howto_cook:e)-:p
             ACCUM s.@steps +=1
             ORDER BY s.@steps DESC
             LIMIT k;

PRINT rec[rec.id,rec.@steps,rec.title] as recipes;
}

CREATE QUERY jaccard_nbor_ss(vertex source, INT topK) FOR GRAPH RecipeNLG {

/* This query calculates the Jaccard Similarity between a given vertex and every other vertex.
Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
Try also keywords: onion, cheese, olives
*/

  SumAccum<INT> @intersection_size, @@set_size_A, @set_size_B;
  SumAccum<FLOAT> @similarity;


        Start (ANY) = {source};
        Start = SELECT s
          FROM Start:s
                ACCUM @@set_size_A += s.outdegree();

        Subjects = SELECT t
                   FROM Start:s-(:e)-:t;

        Others = SELECT t
                 FROM Subjects:s -(:e)- :t
                 WHERE t != source
                 ACCUM t.@intersection_size += 1,
                       t.@set_size_B = t.outdegree()
                 POST-ACCUM t.@similarity = t.@intersection_size*1.0/(@@set_size_A + t.@set_size_B - t.@intersection_size)
                 ORDER BY t.@similarity DESC
                 LIMIT topK;

        PRINT Start, source, Others;
}

#INSTALL QUERY jaccard_nbor_ss
